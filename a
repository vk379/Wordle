    body: GridView.count(
        padding: const EdgeInsets.only(left: 600, right: 600, top: 100),
        crossAxisCount: 5,
        crossAxisSpacing: 5.0,
        mainAxisSpacing: 0,
        children: List.generate(25, (index) {
          return SizedBox(
              width: 25,
              child: RawKeyboardListener(
                focusNode: FocusNode(),
                onKey: (RawKeyEvent event)
                  {
                    if(event.data.logicalKey == LogicalKeyboardKey.backspace && [0,5,10,15,20].contains(index) == false)
                      {
                        //print(index);
                        if([4,9,14,19,24].contains(index) == true)
                        {
                          FocusScope.of(context).nextFocus();
                        }
                        //print('Index $index');
                        //print(_controller);
                        //_controller[index].text = "";
                        // print(txtAll[0][index]);
                        // print(txtAll[0]);
                        FocusScope.of(context).previousFocus();
                        FocusScope.of(context).previousFocus();
                      }
                  },
                child: TextField(
                    textInputAction: TextInputAction.next,
                    onSubmitted: (value)
                    {
                      List<Color> realColors = List.generate(5,(i) => Colors.transparent);
                      FocusScope.of(context).nextFocus();
                      String enteredWord = _controller[index-4].text + _controller[index-3].text + _controller[index-2].text + _controller[index-1].text + _controller[index].text;



                      for(int i = 0; i < 5; i++)
                        {
                          if(enteredWord[i] == myWord[i])
                            {
                              realColors[i] = Colors.green;
                            }
                          else if(myWord.contains(enteredWord[i]))
                            {
                              realColors[i] = Colors.amber[500]!;
                            }
                          else
                            {
                              realColors[i] = Colors.transparent;
                            }
                        }

                        setState(() {
                          for (int i = 0; i < 5; i++)
                            {
                              _colors[index - i] = realColors[4 - i];
                              _readOnly[index - i] = true;

                            }

                        });

                    },
                    maxLength: 1,
                    onChanged: (value)
                    {
                      if([4,9,14,19,24].contains(index) == true)
                        {
                          //print('Index $index');
                          //FocusScope.of(context).nextFocus();
                        }
                      else
                        {
                          FocusScope.of(context).nextFocus();
                          FocusScope.of(context).nextFocus();
                        }
                    },
                    inputFormatters: [
                      UpperCaseTextFormatter(),
                    ],
                    autofocus: false,
                    cursorHeight: 0.0,
                    cursorWidth: 0.0,
                    //readOnly: _readOnly[index],
                    controller:  _controller[index],
                    style: const TextStyle(
                      fontSize: 25.0,
                      height:1.0,
                      color: Colors.white,
                    ),
                    decoration: InputDecoration(
                      counterText: "",
                      fillColor: _colors[index],
                      //fillColor: Colors.red,
                      filled: true,
                      //contentPadding: const EdgeInsets.all(10.0),
                      focusedBorder:  OutlineInputBorder(
                        borderSide: BorderSide(color: Colors.grey[800]!, width: 2.0),
                      ),
                      enabledBorder:  OutlineInputBorder(
                        borderSide: BorderSide(color: Colors.grey[800]!, width: 2.0),
                      ),
                      hintText: '',
                  ),
                ),
              ),
            );
        }
        )
      ),